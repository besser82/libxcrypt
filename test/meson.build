
ka_tests = [
    'bcrypt_a',
    'bcrypt_x',
    'bcrypt_y',
    'bcrypt',
    'bigcrypt',
    'bsdicrypt',
    'descrypt',
    'gost_yescrypt',
    'md5crypt',
    'nt',
    'scrypt',
    'sha1crypt',
    'sha256crypt',
    'sha512crypt',
    'sunmd5',
    'yescrypt',
]

algo_tests = [
    'alg-des',
    'alg-gost3411-2012-hmac',
    'alg-gost3411-2012',
    'alg-hmac-sha1',
    'alg-md4',
    'alg-md5',
    'alg-pbkdf-hmac-sha256',
    'alg-sha1',
    'alg-sha256',
    'alg-sha512',
    'alg-yescrypt',
]

generic_tests = [
    'badsalt',
    'badsetting',
    'byteorder',
    'checksalt',
    'compile-strong-alias',
    'crypt-badargs',
    'crypt-gost-yescrypt',
    'gensalt',
    'gensalt-extradata',
    'gensalt-nthash',
    'getrandom-fallbacks',
    'getrandom-interface',
    'preferred-method',
    'short-outbuf',
    'special-char-salt',
]

foreach test : ka_tests
    test_exe = executable('ka-@0@'.format(test),
        'ka-tester.c',
        libcrypt_gen_headers,
        c_args: '-DTEST_@0@'.format(test),
        include_directories: [ root_include, lib_include, ],
        link_with: libcrypt,
    )
    test(test, test_exe, suite: 'ka-tests', )
endforeach

foreach test : algo_tests
    test_exe = executable(test,
        '@0@.c'.format(test),
        libcrypt_gen_headers,
        include_directories: [ root_include, lib_include, ],
        link_with: libcrypt,
    )
    test(test, test_exe, suite: 'algo-tests', )
endforeach

foreach test : generic_tests
    if have_ld_wrap and test == 'getrandom-fallbacks'
        link_args = [
            '-Wl,--wrap,getentropy',
            '-Wl,--wrap,getrandom',
            '-Wl,--wrap,syscall',
            '-Wl,--wrap,open',
            '-Wl,--wrap,open64',
            '-Wl,--wrap,read',
            '-Wl,--wrap,close',
        ]
    else
        link_args = []
    endif

    test_exe = executable(test,
        '@0@.c'.format(test),
        libcrypt_gen_headers,
        include_directories: [ root_include, lib_include, ],
        link_args: link_args,
        link_with: libcrypt,
    )
    test(test, test_exe, suite: 'generic-tests', )
endforeach



if enable_ka_table_gen and static_libs_enabled
    # test/ka-table.inc can be regenerated by running test/ka-table-gen.py.
    # This is very slow and requires nonstandard Python libraries and a shared
    # library build of libcrypt already present in the build-tree, so we only
    # do it when explicitly requested.

    # run_target('regen-ka-table',
    #     command: [
    #         python, files('ka-table-gen.py'),
    #         '>', files('ka-table.inc'),
    #     ],
    # )
endif


if false
    test_env = environment()
    test_env.set('host_os', os)
    test_env.set('lib_la', libcrypt.full_path())
    test_env.set('lib_map', meson.project_source_root() / 'lib' / 'libcrypt.map.in')

    if enable_obsolete_api
        # check_PROGRAMS += test/des-obsolete test/des-obsolete_r test/fcrypt-enosys
        test('symbols-compat', find_program('symbols-compat.sh'), env: test_env, )

    endif

    if static_libs_enabled
        test('symbols-static', find_program('symbols-static.sh'), env: test_env, )

        test('symbols-renames', find_program('symbols-renames.sh'), env: test_env, )
    endif
endif
